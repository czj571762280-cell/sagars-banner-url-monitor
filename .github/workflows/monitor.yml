name: Detect URL Once and Notify

on:
  schedule:
    - cron: '*/30 * * * *'   # 每30分钟检测一次
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: pip install requests

      - name: Run one-time monitor
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          TARGET_URLS: |
            https://dy2q74h86jiwd.cloudfront.net/static/images/info/130849/news_banner_20251008.png
            https://dy2q74h86jiwd.cloudfront.net/static/images/info/130849/news_banner_20251200.png
        run: |
          python3 - <<'PY'
          import os, requests, smtplib, ssl
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from datetime import datetime

          smtp_server = os.environ['SMTP_SERVER']
          smtp_port = int(os.environ['SMTP_PORT'])
          username = os.environ['SMTP_USERNAME']
          password = os.environ['SMTP_PASSWORD']
          to_email = os.environ['TO_EMAIL']

          # 多行写法处理
          urls_raw = os.environ['TARGET_URLS']
          urls = [u.strip() for u in urls_raw.splitlines() if u.strip()]

          context = ssl.create_default_context()
          done_flag = "done.flag"

          if os.path.exists(done_flag):
              print("✅ 检测已完成（存在 done.flag），不再执行。")
              exit(0)

          has_info_urls = []

          for url in urls:
              print(f"🔍 检查：{url}")
              try:
                  r = requests.get(url, timeout=30)
                  r.raise_for_status()
                  text = r.text.strip()
                  if len(text) > 0:
                      print(f"⚠️ 发现 {url} 有内容！")
                      has_info_urls.append(url)
                  else:
                      print(f"✅ {url} 为空，无信息。")
              except Exception as e:
                  print(f"❌ {url} 请求失败：{e}")

          if has_info_urls:
              msg = MIMEMultipart("alternative")
              msg["Subject"] = "检测到网页有内容"
              msg["From"] = username
              msg["To"] = to_email
              body = f"时间：{datetime.now()}\n以下网址检测到非空内容：\n" + "\n".join(has_info_urls)
              msg.attach(MIMEText(body, "plain"))

              try:
                  if smtp_port == 465:
                      with smtplib.SMTP_SSL(smtp_server, smtp_port, context=context) as server:
                          server.login(username, password)
                          server.sendmail(username, to_email, msg.as_string())
                  else:
                      with smtplib.SMTP(smtp_server, smtp_port) as server:
                          server.starttls(context=context)
                          server.login(username, password)
                          server.sendmail(username, to_email, msg.as_string())
                  print("📧 邮件发送成功！")
              except Exception as e:
                  print(f"❌ 邮件发送失败：{e}")

              with open(done_flag, "w") as f:
                  f.write("done")
              print("✅ 已生成 done.flag，下次将自动停止检测。")
          else:
              print("⏳ 所有网址都为空，未发现内容。")
          PY
